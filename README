MIEILA Eduard-Robert, 333CA
Paralelizarea unui algoritm genetic

In rezolvarea acestei probleme am plecat de la scheletul de cod primit.
In primul rand, am plecat de la ideile folosite in laboratoare, si anume acelea
de a distribui numarul de operatii in mod egal intre threaduri. Astfel, spre
deosebire de implementarea seriala, toate for-urile din cod nu se vor mai
executa de la inceputul vectorului de elemente genetice pana la final,
ci, in functie de operatia ce urmeaza sa fie executata(initializare/copiere/
mutatii/crossover), acestea vor avea efect pe portiuni din generatii pe
fiecare thread.
Pentru a ne asigura ca vom avea o executie corecta a algoritmului,
am adaugat un numar de bariere pentru a asigura sincronizarea intre thread-uri,
astfel am introdus bariere pentru:
- a astepta initializarea datelor
- in cadrul fiecarei iteratii prin generatii:
    * a astepta calculul coeficientului fitness pe intreaga generatie
    * a astepta sortarea dupa coeficientul fitness in generatia curente
    * a astepta ca toate copierile, mutatiile si crossover-urile sa fie
        efectuate
    * a astepta ca indexul pe generatia curenta sa fie atribuit fiecarui elem.
- a astepta ca toate iteratiile sa fie finalizate pentru a afisa rezultatul 
    final

Sortarile, afisarile si verificarea daca numarul indiviizilor ce urmeaza sa
fie folositi in operatia de crossover, urmata de actiunea necesara in acest
caz, vor fi executate doar de thread-ul 0.

Un alt aspect important ce tine de paralelizarea codului din schelet si
eficientizarea acestuia este calculul numarul de biti setati pe 1 in sirul
de cromozomi. Am constatat faptul ca in functia cmpfunc ce era folosita
pentru sortare, de fiecare data cand aceasta era apelata, ea calcula pe loc
numarul de biti setati pe 1. Astfel, timpul pierdut era semnificativ, tinand
cont ca pe un element se itera de mai multe ori prin cromozomii acestuia,
prin urmare am ales sa introduc un camp nou in structura individual care sa
stocheze tocmai acest numar. Calculul numarului de cromozomi setati pe 1
se va face acum o singura data per iteratie in cadrul unei generatii, mai
exact, in momentul in care se calculeaza coeficientul fitness.